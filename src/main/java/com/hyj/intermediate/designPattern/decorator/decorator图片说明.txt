装饰者模式（Decorator）：动态地为一个对象添加一些额外的职责，若要扩展一个对象的功能，
装饰者提供了比继承更有弹性的替代方案。

抽象构件类（Component）：给出一个抽象的接口，用以规范准备接收附加责任的对象
具体构件类（ConcreteComponent）：定义一个具体的准备接受附加责任的类，其必须实现Component接口。
装饰者类（Decorator）：持有一个构件（Conponent）对象的实例，并定义一个和抽象构件一致的接口。
具体装饰者类（Concrete Decoratator）：定义给构件对象“贴上”附加责任